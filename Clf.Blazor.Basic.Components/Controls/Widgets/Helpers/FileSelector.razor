@using Clf.Blazor.Basic.Components.Controls.ViewModels.HelperWidgetViewModels
@using Clf.Blazor.Basic.Components.Controls.Widgets.Updates
@using Clf.Blazor.Basic.Components.Controls.Models
@using System 
@using System.IO
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment Environment

@if (ViewModel != null)
{
  <label class="file-selector">
    <InputFile OnChange="OnLoadFiles" hidden style="color:transparent;"/>
  </label>
  <ModalDialog ViewModel="@WarningModal"></ModalDialog>
}

@code {
  [Parameter]
  public FileSelectorViewModel? ViewModel { get; set; }
  private ModalDialogViewModel WarningModal { get; set; } = new ModalDialogViewModel();

  private async Task OnLoadFiles(InputFileChangeEventArgs e)
  {
    WarningModal.OnModalDialogButton1Clicked = OnAccept;
    if (ViewModel != null)
    {
      ViewModel.IsLoading = true;
      ViewModel.Files = new List<IBrowserFile>();

      foreach (var file in e.GetMultipleFiles(ViewModel.MaxAllowedFiles))
      {
        try
        {
          // Opening file is a security risk. 
          // We need a "unsafe_uploads" location where we can copy them "safely"
          // A file can only be opened to read if it already exists in our "unsafe_uploads" space.
          // Hence the reason is why we need to make sure the file is less than max set size.
          var folderName = Path.Combine(Environment.ContentRootPath,
                  Environment.EnvironmentName, "unsafe_uploads");
          // Check if the directory exists, if not create one with given folder path
          if (!Directory.Exists(folderName))
            // TODO: Sort out the security permissions for the application
            // For now manually add the write permissions to the IIS_USERS
            Directory.CreateDirectory(folderName);

          var path = Path.Combine(folderName, file.Name);

          await using (FileStream fs = new(path, FileMode.Create))
          {
            await file.OpenReadStream(ViewModel.MaxFileSize).CopyToAsync(fs);
          }

          ViewModel.Files.Add(file);
          ViewModel.Environment = Environment;
          ViewModel.OnFileSelectedAsync();
          ViewModel.IsLoading = false;
        }
        catch (Exception ex)
        {
          WarningModal.Title = "File loading failed";
          WarningModal.BodyText = ex.Message;
          WarningModal.Type = Clf.Blazor.Basic.Components.Controls.Models.ModalTypes.OneButton;
          WarningModal.Button1Text = "Ok";
          WarningModal.Open();
        }
      }
    }
  }

  private void OnAccept()
  {
    WarningModal.Close();
  }
}