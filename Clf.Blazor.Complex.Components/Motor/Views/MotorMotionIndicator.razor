@using Clf.Blazor.Basic.Components.Controls;
@using Clf.Blazor.Basic.Components.Controls.Helpers;
@using Clf.Blazor.Complex.Components.Motor.ViewModels;
@inherits WidgetBase
@implements IDisposable

@if (ViewModel!.IsVisible)
{
    <div style="padding-left: 2%;
            padding-right: 2%;
            padding-top: 1%;
            height: @($"{ViewModel.Height + 15}px");">
        <div style="position: relative;
                width: 100%;
                height: @($"{ViewModel.Height + (2 * ViewModel.BorderWidth)}px");
                background-color: gray;
                border-style: solid;
                border-width: @($"{ViewModel.BorderWidth}px");
                box-shadow: @($"0 0 0 2px {Utilities.GetColourFromBorderStatus(ViewModel.BorderStatus)?.HtmlRgbaString}");">
            <div style="position: absolute;
                    width: 2%;
                    height: @($"{ViewModel.Height}px");
                    left: @($"{ViewModel.SoftLimitLow - 2}%");
                    background-color: red;" data-toggle="tooltip" title="@ViewModel.UserLowLimit"></div>
            <div style="position: absolute;
                    width: @($"{ViewModel.SoftLimitHigh - ViewModel.SoftLimitLow}%");
                    height: @($"{ViewModel.Height}px");
                    left: @($"{ViewModel.SoftLimitLow}%");
                    background-color: yellow;">
                <div style="position: absolute;
                        height: @($"{ViewModel.Height}px");
                        width: @($"{ViewModel.UserReadbackValue}%");
                        background-color: dodgerblue;
                        border-right-style: solid"></div>
            </div>
            <div style="position: absolute;
                    width: 2%;
                    height: @($"{ViewModel.Height}px");
                    left: @($"{ViewModel.SoftLimitHigh}%");
                    background-color: red;" data-toggle="tooltip" title="@ViewModel.UserHighLimit"></div>
            <div style="position: absolute;
                    user-select: none;
                    top: @($"{ViewModel.Height - 2}px");
                    margin-left: -11px;
                    left: @($"{ViewModel.UserDesiredValue}%");">
                <svg height="20" width="20">
                    <polygon points="10,1 15,8 5,8" style="fill:@(ViewModel.IndicatorColor);
                                                            stroke:black;
                                                            stroke-width:1" />
                </svg>
            </div>
        </div>   
    </div>
} 
else
{
    <div style="height: @($"{ViewModel.Height + 15}px");"></div>
}
@code {
  [Parameter]
  public MotorMotionIndicatorViewModel ViewModel { get; set; }

  protected override void OnInitialized()
  {
    base.OnInitialized();
    ViewModel.PropertyChanged += OnPropertyChanged;

    ViewModel.InitialiseStartupValues();
  }

    void IDisposable.Dispose()
    {
        ViewModel.PropertyChanged -= OnPropertyChanged;
    }
}
